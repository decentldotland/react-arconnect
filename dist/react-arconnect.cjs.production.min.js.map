{"version":3,"file":"react-arconnect.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext, createContext } from 'react';\nimport { AppInfo, GatewayConfig, PermissionType } from 'arconnect';\n\nexport type AlgorithmInterface =\n  | AlgorithmIdentifier\n  | RsaPssParams\n  | EcdsaParams;\n\nexport interface options {\n  algorithm: string;\n  hash: string;\n  salt?: string;\n}\n\nexport interface ANS {\n  address_color: string;\n  currentLabel: string;\n  avatar: string;\n}\n\nexport type createSignatureInterface = (\n  data: Uint8Array,\n  signatureParams: AlgorithmInterface\n) => Promise<Uint8Array | undefined>;\n\nexport type encryptInterface = (\n  options: {\n    name: string;\n    hash?: string;\n    salt?: string;\n  },\n  data: BufferSource\n) => Promise<Uint8Array>;\n\nexport type decryptInterface = (\n  data: Uint8Array,\n  algorithm: options\n) => Promise<string>;\n\nexport type arconnectConnectInterface = (\n  permissions: PermissionType[],\n  appInfo?: AppInfo,\n  gatewayConfig?: GatewayConfig\n) => Promise<void>;\n\nexport interface ArconnectContextInterface {\n  walletPermissions: PermissionType[];\n  walletConnected: boolean;\n  address: string;\n  ANS: ANS | undefined;\n  arconnectConnect: arconnectConnectInterface;\n  arconnectDisconnect: () => Promise<void>;\n  getPublicKey: () => Promise<string>;\n  createSignature: createSignatureInterface;\n  encrypt: encryptInterface;\n  decrypt: decryptInterface;\n  shortenAddress: (address: string) => string;\n};\n\nexport const defaultSignatureParams = { name: 'RSA-PSS', saltLength: 32 };\nexport const defaultAlgorithmParams = {\n  name: 'RSA-PSS',\n  hash: 'sha256',\n  saltLength: 32,\n};\n\nexport const ANS_URL = 'https://ans-resolver.herokuapp.com/resolve-as-arpage/';\n\nexport const ArconnectContext = createContext<\n  Partial<ArconnectContextInterface>\n>({} as ArconnectContextInterface);\n\nexport function useArconnect(): Partial<ArconnectContextInterface> {\n  const useArconnectContext: Partial<ArconnectContextInterface> = useContext(\n    ArconnectContext\n  );\n\n  if (useArconnectContext === null) {\n    throw new Error(\n      'useArconnect() can only be used inside of <ArconnectProvider />, ' +\n        'please declare it at a higher level.'\n    );\n  }\n\n  return useArconnectContext;\n}\n\ntype Props = {\n  children: any;\n};\n\nexport const ArconnectProvider = (props: Props) => {\n  const [walletConnected, setWalletConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string>('');\n  const [ANS, setANS] = useState<ANS | undefined>();\n  const [walletPermissions, setWalletPermissions] = useState<PermissionType[]>(\n    []\n  );\n\n  const arconnectConnect: arconnectConnectInterface = async (\n    permissions,\n    appInfo,\n    gatewayConfig\n  ) => {\n    try {\n      if (!window.arweaveWallet)\n        throw new Error('No ArConnect wallet detected');\n      if (permissions.length === 0 || !permissions.includes('ACCESS_ADDRESS'))\n        throw new Error(\n          'ArConnect requires ACCESS_ADDRESS permission to connect'\n        );\n      let currentPerms = await window.arweaveWallet.getPermissions();\n      if (currentPerms.length === 0)\n        await window.arweaveWallet.connect(permissions, appInfo, gatewayConfig);\n      currentPerms = await window.arweaveWallet.getPermissions();\n      const correctPerms =\n        permissions.sort().toString() === currentPerms.sort().toString();\n\n      if (!correctPerms) {\n        await window.arweaveWallet.disconnect();\n        if (currentPerms.length !== 0)\n          throw new Error('Re-connect with correct permissions');\n        return;\n      }\n      setWalletPermissions(permissions);\n      setAddress(await _getAddress());\n      setWalletConnected(true);\n    } catch (Error) {\n      console.error(Error);\n    }\n  };\n\n  const arconnectDisconnect = async () => {\n    try {\n      await window.arweaveWallet.disconnect();\n      setWalletConnected(false);\n      setAddress(undefined);\n      setWalletPermissions([]);\n    } catch (Error) {\n      console.error(Error);\n    }\n  };\n\n  const getPublicKey = async () => {\n    try {\n      return await window.arweaveWallet.getActivePublicKey();\n    } catch (Error) {\n      console.error(Error);\n      return '';\n    }\n  };\n\n  // example of params for signature generation:\n  // data: new TextEncoder().encode(\"Hello world!\");\n  // signatureParams: defaultSignatureParams\n\n  const createSignature: createSignatureInterface = async (\n    data,\n    signatureParams\n  ) => {\n    try {\n      const signature = await window.arweaveWallet.signature(\n        data,\n        signatureParams\n      );\n      if (!signature) throw new Error('ArConnect signature generation failed');\n\n      return signature;\n    } catch (Error) {\n      console.error(Error);\n      return undefined;\n    }\n  };\n\n  // TODO: NEEDS FURTHER IMPROVEMENT\n  const encrypt: encryptInterface = async (options, data) => {\n    // @ts-ignore\n    const encryptedData = await window.arweaveWallet.encrypt(data, options);\n    return encryptedData;\n  };\n\n  // TODO: NEEDS FURTHER IMPROVEMENT\n  const decrypt: decryptInterface = async (data, options) => {\n    const decryptedData = await window.arweaveWallet.decrypt(data, options);\n    return decryptedData;\n  };\n\n  const shortenAddress = (address: string, maxLength = 20) => {\n    // to avoid trimming small names by default\n    if (address.length < maxLength) return address;\n\n    return (\n      address.substring(0, maxLength / 2) +\n      '...' +\n      address.substring(address.length - maxLength / 2, address.length)\n    );\n  };\n\n  // wallet address change event\n  // when the user switches wallets\n  const _walletSwitchEvent = async (e: any) => {\n    setAddress(e.detail.address);\n  };\n\n  const _walletLoadedEvent = async () => {\n    try {\n      const addr = await _getAddress();\n      setAddress(addr);\n      // @ts-ignore\n      setANS(res);\n      setWalletConnected(true);\n    } catch {\n      setAddress(undefined);\n      setWalletConnected(false);\n    }\n  };\n\n  const _getAddress = () => window.arweaveWallet.getActiveAddress();\n\n  const _fetchANS = async (address: string) => {\n    try {\n      if (!address) throw new Error('No address detected');\n      const response = await fetch(ANS_URL + address);\n      let ans: ANS | undefined;\n      try {\n        ans = await response.json();\n      } catch {\n        console.warn(`address ${address} not found`);\n        ans = undefined;\n      }\n\n      return {\n        address_color: ans?.address_color,\n        currentLabel: ans?.currentLabel,\n        avatar: ans?.avatar,\n      };\n    } catch (error) {\n      console.error(error);\n      return undefined;\n    }\n  };\n\n  useEffect(() => {\n    // add ArConnect event listeners\n    window.addEventListener('arweaveWalletLoaded', _walletLoadedEvent);\n    window.addEventListener('walletSwitch', _walletSwitchEvent);\n    return () => {\n      // remove ArConnect event listeners\n      window.removeEventListener('arweaveWalletLoaded', _walletLoadedEvent);\n      window.removeEventListener('walletSwitch', _walletSwitchEvent);\n    };\n  });\n\n  useEffect(() => {\n    const fetchANSData = async () => {\n      if (!address) return;\n      const data = await _fetchANS(address);\n      if (data) setANS({ ...data });\n    };\n\n    fetchANSData();\n  }, [address]);\n\n  useEffect(() => {\n    let apiInjected = false;\n\n    const loadedEvent = async () => {\n      if (address) return;\n      apiInjected = true;\n\n      try {\n        const currentPerms = await window.arweaveWallet.getPermissions();\n        const correctPerms =\n          walletPermissions.sort().toString() == currentPerms.sort().toString();\n        if (!correctPerms) {\n          await window.arweaveWallet.disconnect();\n          if (currentPerms.length !== 0)\n            throw new Error('Re-connect with correct permissions.');\n          return;\n        } else {\n          setWalletPermissions(currentPerms);\n        }\n        const addr = await window.arweaveWallet.getActiveAddress();\n        setAddress(addr);\n        _fetchANS(addr).then(setANS);\n      } catch {}\n    };\n\n    window.addEventListener('arweaveWalletLoaded', loadedEvent);\n\n    // double check if arconnect was added\n    setTimeout(() => {\n      if (apiInjected || !window.arweaveWallet) return;\n      loadedEvent();\n    }, 1000);\n\n    return () => window.removeEventListener('arweaveWalletLoaded', loadedEvent);\n  }, []);\n\n  return (\n    <ArconnectContext.Provider\n      value={{\n        walletPermissions,\n        walletConnected,\n        address,\n        ANS,\n        arconnectConnect,\n        arconnectDisconnect,\n        getPublicKey,\n        createSignature,\n        decrypt,\n        encrypt,\n        shortenAddress,\n      }}\n    >\n      {props.children}\n    </ArconnectContext.Provider>\n  );\n};\n"],"names":["ANS_URL","ArconnectContext","createContext","props","useState","walletConnected","setWalletConnected","address","setAddress","ANS","setANS","walletPermissions","setWalletPermissions","arconnectConnect","permissions","appInfo","gatewayConfig","_context","window","arweaveWallet","Error","length","includes","getPermissions","currentPerms","connect","sort","toString","disconnect","_getAddress","console","error","arconnectDisconnect","_context2","undefined","getPublicKey","_context3","getActivePublicKey","createSignature","data","signatureParams","_context4","signature","encrypt","options","_context5","decrypt","_context6","_walletSwitchEvent","e","detail","_walletLoadedEvent","_context8","res","getActiveAddress","_fetchANS","_context9","fetch","response","json","ans","warn","address_color","_ans","currentLabel","_ans2","avatar","_ans3","useEffect","addEventListener","removeEventListener","_context10","fetchANSData","apiInjected","loadedEvent","_context11","addr","then","setTimeout","React","Provider","value","shortenAddress","maxLength","substring","children","name","hash","saltLength","useArconnectContext","useContext"],"mappings":"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"}